{
  "operations": [
    {
      "name": "create",
      "params": [
        "resourceType",
        "data",
        "options",
        "params",
        "callback"
      ],
      "docs": {
        "description": "A generic helper method to create a record of any kind in DHIS2",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Type of resource to create. E.g. `trackedEntityInstances`, `programs`, `events`, ...",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "Data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Optional `options` to control the behavior of the `create` operation.` Defaults to `{operationName: 'create', apiVersion: null, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional `import parameters` for a given a resource. E.g. `{dryRun: true, importStrategy: CREATE}` See {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html DHIS2 API documentation} or {@link discover}. Defauls to `DHIS2 default params` for a given resource type.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "create('programs', {\n  name: 'name 20',\n  shortName: 'n20',\n  programType: 'WITHOUT_REGISTRATION',\n});",
            "caption": "- Example 'expression.js` of `create` for a single program"
          },
          {
            "title": "example",
            "description": "create('events', {\n  program: 'eBAyeGv0exc',\n  orgUnit: 'DiszpKrYNg8',\n  status: 'COMPLETED',\n});",
            "caption": "- Example `expression.js` of `create` for a single event"
          },
          {
            "title": "example",
            "description": "create('trackedEntityInstances', {\n  orgUnit: 'TSyzvBiovKh',\n  trackedEntityType: 'nEenWmSyUEp',\n  attributes: [\n    {\n      attribute: 'w75KJ2mc4zz',\n      value: 'Gigiwe',\n    },\n  ]\n});",
            "caption": "- Example `expression.js` of `create` for a single `trackedEntityInstance`"
          },
          {
            "title": "example",
            "description": "create('dataValueSets', {\n  dataElement: 'f7n9E0hX8qk',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  value: '12',\n});",
            "caption": "- Example `expression.js` of `create` for a single `dataValueSets`"
          },
          {
            "title": "example",
            "description": "create('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});",
            "caption": "- Example `expression.js` of `create` for `dataValueSets` for sending a set of related data values sharing the same period and organisation unit"
          },
          {
            "title": "example",
            "description": "create('enrollments', {\n  trackedEntityInstance: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-09-17',\n  incidentDate: '2013-09-17',\n});",
            "caption": "- Example `expression.js` of `create` for a single `enrollment` of a `trackedEntityInstance` into a `program`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "update",
      "params": [
        "resourceType",
        "path",
        "data",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Update data. A generic helper function to update a resource object of any type.\nUpdating an object requires to send `all required fields` or the `full body`",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}`",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Optional `update` parameters e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters DHIS2 documentation}",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional options for update method. Defaults to `{operationName: 'update', apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "operationName",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "resourceType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "update('programs', 'qAZJCrNJK8H', {\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\n  shortName: '14e1aa02',\n  programType: 'WITHOUT_REGISTRATION',\n});",
            "caption": "- Example 'expression.js` of `update` for a single program"
          },
          {
            "title": "example",
            "description": "update('events', 'PVqUD2hvU4E', {\n  program: 'eBAyeGv0exc',\n  orgUnit: 'Ngelehun CHC',\n  status: 'COMPLETED',\n  storedBy: 'admin',\n  dataValues: [],\n});",
            "caption": "Example `expression.js` of `update` for a single `event`"
          },
          {
            "title": "example",
            "description": "update('trackedEntityInstances', 'IeQfgUtGPq2', {\n  created: '2015-08-06T21:12:37.256',\n  orgUnit: 'TSyzvBiovKh',\n  createdAtClient: '2015-08-06T21:12:37.256',\n  trackedEntityInstance: 'IeQfgUtGPq2',\n  lastUpdated: '2015-08-06T21:12:37.257',\n  trackedEntityType: 'nEenWmSyUEp',\n  inactive: false,\n  deleted: false,\n  featureType: 'NONE',\n  programOwners: [\n    {\n      ownerOrgUnit: 'TSyzvBiovKh',\n      program: 'IpHINAT79UW',\n      trackedEntityInstance: 'IeQfgUtGPq2',\n    },\n  ],\n  enrollments: [],\n  relationships: [],\n  attributes: [\n    {\n      lastUpdated: '2016-01-12T00:00:00.000',\n      displayName: 'Last name',\n      created: '2016-01-12T00:00:00.000',\n      valueType: 'TEXT',\n      attribute: 'zDhUuAYrxNC',\n      value: 'Russell',\n    },\n    {\n      lastUpdated: '2016-01-12T00:00:00.000',\n      code: 'MMD_PER_NAM',\n      displayName: 'First name',\n      created: '2016-01-12T00:00:00.000',\n      valueType: 'TEXT',\n      attribute: 'w75KJ2mc4zz',\n      value: 'Catherine',\n    },\n  ],\n});",
            "caption": "Example `expression.js` of `update` for a single `trackedEntityInstance`"
          },
          {
            "title": "example",
            "description": "update('dataValueSets', 'f7n9E0hX8qk', {\n  dataElement: 'f7n9E0hX8qk',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  value: '13',\n});",
            "caption": "- Example `expression.js` of `update` for a single `dataValueSet`"
          },
          {
            "title": "example",
            "description": "update('enrollments', 'CmsHzercTBa' {\n  trackedEntityInstance: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-10-17',\n  incidentDate: '2013-10-17',\n});",
            "caption": "- Example `expression.js` of `update` for a single `enrollment`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getTEIs",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get Tracked Entity Instance(s).",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Optional `query parameters` e.g. `{ou: 'DiszpKrYNg8', filters: ['lZGmxYbs97q':GT:5']}`. Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html DHIS2 docs} for more details on which params to use when querying tracked entities instances.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "`Optional` options for `getTEIs` operation. Defaults to `{apiVersion: state.configuration.apiVersion, responseType: 'json'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getTEIs({\n  fields: '*',\n  ou: 'CMqUILyVnBL',\n  trackedEntityInstance: 'HNTA9qD6EEG',\n  skipPaging: true,\n});",
            "caption": "- Example `getTEIs` `expression.js` for fetching a `single` `Tracked Entity Instance` with all the fields included."
          }
        ]
      },
      "valid": true
    },
    {
      "name": "upsertTEI",
      "params": [
        "uniqueAttributeId",
        "data",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Update TEI if exists otherwise create.\n- Update if the record exists otherwise insert a new record.\n- This is useful for idempotency and duplicate record management.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Tracked Entity Instance unique identifier attribute used during matching.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "uniqueAttributeId"
          },
          {
            "title": "param",
            "description": "Payload data for new tracked entity instance or updated data for an existing tracked entity instance.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "`Optional` options for `upsertTEI` operation. Defaults to `{apiVersion: state.configuration.apiVersion,strict: true,responseType: 'json'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "strict",
                    "value": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional `callback` to handle the response.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "throws",
            "description": "Throws `RangeError` when `uniqueAttributeId` is `invalid` or `not unique`.",
            "type": {
              "type": "NameExpression",
              "name": "RangeError"
            }
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "upsertTEI('lZGmxYbs97q', {\n  orgUnit: 'TSyzvBiovKh',\n  trackedEntityType: 'nEenWmSyUEp',\n  attributes: [\n    {\n      attribute: 'lZGmxYbs97q',\n      value: '77790012',\n    },\n    {\n      attribute: 'w75KJ2mc4zz',\n      value: 'Gigiwe',\n    },\n    {\n      attribute: 'zDhUuAYrxNC',\n      value: 'Mwanza',\n    },\n  ],\n});",
            "caption": "- Example `expression.js` for upserting a tracked entity instance on attribute with Id `lZGmxYbs97q`."
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getEvents",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get annonymous events or tracker events.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "`import` parameters for `getEvents`. See examples here",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "`Optional` options for `getEvents` operation. Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getEvents({ orgUnit: 'YuQRtpLP10I', ouMode: 'CHILDREN' });",
            "caption": "- Query for `all events` with `children` of a certain `organisation unit`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getPrograms",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get DHIS2 Tracker Programs.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "`import` parameters for `getPrograms`. See {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#tracker-web-api DHIS2 api documentation for allowed query parameters }",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `flags` for the behavior of the `getPrograms` operation.Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getPrograms({ orgUnit: 'DiszpKrYNg8' , fields: '*' });",
            "caption": "- Query for `all programs` with a certain `organisation unit`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getEnrollments",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get DHIS2 Enrollments",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "`Query` parameters for `getEnrollments`. See {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#enrollment-management  here}",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `flags` for the behavior of the `getEnrollments` operation.Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getEnrollments({\n  ou: 'O6uvpzGd5pu',\n  ouMode: 'DESCENDANTS',\n  program: 'ur1Edk5Oe2n',\n  fields: '*',\n});",
            "caption": "- To constrain the response to `enrollments` which are part of a `specific program` you can include a `program query parameter`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "updateEnrollments",
      "params": [
        "path",
        "data",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Update a DHIS2 Enrollemts\n- To update an existing enrollment, the format of the payload is the same as that of `creating an event` via `createEvents` operations\n- But  you should supply the `identifier` of the object you are updating\n- The payload has to contain `all`, even `non-modified`, `attributes`.\n- Attributes that were present before and are not present in the current payload any more will be removed by DHIS2.\n- If you do not want this behavior, please use `upsert` operation to upsert your events.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Path to the object being updated. This can be an `id` or path to an `object` in a `nested collection` on the object(E.g. `/api/{collection-object}/{collection-object-id}/{collection-name}/{object-id}`)",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "The update data containing new values",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Optional `import` parameters for `updateEnrollments`. E.g. `{dryRun: true, IdScheme: 'CODE'}. Defaults to DHIS2 `default params`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `flags` for the behavior of the `updateEnrollments` operation.Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "updateEnrollments('PVqUD2hvU4E', state.data);",
            "caption": "- Example `expression.js` of `updateEnromments`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "cancelEnrollment",
      "params": [
        "enrollmentId",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Cancel a DHIS2 Enrollment\n- To cancel an existing enrollment, you should supply the `enrollment identifier`(`enrollemt-id`)",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The `enrollment-id` of the enrollment you wish to cancel",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "enrollmentId"
          },
          {
            "title": "param",
            "description": "Optional `import` parameters for `cancelEnrollment`. E.g. `{dryRun: true, IdScheme: 'CODE'}. Defaults to DHIS2 `default params`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `flags` for the behavior of the `cancelEnrollment` operation.Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "cancelEnrollments('PVqUD2hvU4E');",
            "caption": "- Example `expression.js` of `cancelEnrollment`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "completeEnrollment",
      "params": [
        "enrollmentId",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Complete a DHIS2 Enrollment\n- To complete an existing enrollment, you should supply the `enrollment identifier`(`enrollemt-id`)",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The `enrollment-id` of the enrollment you wish to cancel",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "enrollmentId"
          },
          {
            "title": "param",
            "description": "Optional `import` parameters for `completeEnrollment`. E.g. `{dryRun: true, IdScheme: 'CODE'}. Defaults to DHIS2 `default params`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `flags` for the behavior of the `completeEnrollment` operation.Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "completeEnrollment('PVqUD2hvU4E');",
            "caption": "- Example `expression.js` of `completeEnrollment`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getRelationships",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get DHIS2 Relationships(links) between two entities in tracker. These entities can be tracked entity instances, enrollments and events.\n- All the tracker operations, `getTEIs`, `getEnrollments` and `getEvents` also list their relationships if requested in the `field` filter.\n- To list all relationships, this requires you to provide the UID of the trackedEntityInstance, Enrollment or event that you want to list all the relationships for.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "`Query` parameters for `getRelationships`. See examples {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#relationships here}",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `flags` for the behavior of the `getRelationships` operation.Defaults to `{apiVersion: state.configuration.apiVersion,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getRelationships({ tei: 'F8yKM85NbxW', fields: '*' });",
            "caption": "- A query for `all relationships` associated with a `specific tracked entity instance` can look like this:"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getDataValues",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get DHIS2 Data Values.\n- This operation retrives data values from DHIS2 Web API by interacting with the `dataValueSets` resource\n- Data values can be retrieved in XML, JSON and CSV format.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "`Query` parameters for `getDataValues`. E.g. `{dataset: 'pBOMPrpg1QX', limit: 3, period: 2021, orgUnit: 'DiszpKrYNg8'} Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#data-values DHIS2 API docs} for available `Data Value Set Query Parameters`.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `options` for `getDataValues` operation. Defaults to `{apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional `callback` to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getDataValues({\n  orgUnit: 'DiszpKrYNg8',\n  period: '202010',\n  dataSet: 'pBOMPrpg1QX',\n  limit: 2,\n});",
            "caption": "- Example getting **two** `data values` associated with a specific `orgUnit`, `dataSet`, and `period `"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "generateDhis2UID",
      "params": [
        "options",
        "callback"
      ],
      "docs": {
        "description": "Generate valid, random DHIS2 identifiers\n- Useful for client generated Ids compatible with DHIS2",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Optional `options` for `generateDhis2UID` operation. Defaults to `{apiVersion: state.configuration.apiVersion,limit: 1,responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "limit",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Callback to handle response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "generateDhis2UID({limit: 3});",
            "caption": "Example generating `three UIDs` from the DHIS2 server"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "discover",
      "params": [
        "httpMethod",
        "endpoint"
      ],
      "docs": {
        "description": "Discover `DHIS2` `api` `endpoint` `query parameters` and allowed `operators` for a given resource's endpoint.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The HTTP to inspect parameter usage for a given endpoint, e.g., `get`, `post`,`put`,`patch`,`delete`",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "httpMethod"
          },
          {
            "title": "param",
            "description": "The path for a given endpoint. E.g. `/trackedEntityInstances` or `/dataValueSets`",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "endpoint"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "discover('post', '/trackedEntityInstances')",
            "caption": "Example getting a list of `parameters allowed` on a given `endpoint` for specific `http method`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getAnalytics",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get analytical, aggregated data\n- The analytics resource is powerful as it lets you query and retrieve data aggregated along all available data dimensions.\n- For instance, you can ask the analytics resource to provide the aggregated data values for a set of data elements, periods and organisation units.\n- Also, you can retrieve the aggregated data for a combination of any number of dimensions based on data elements and organisation unit group sets.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Analytics `query parameters`, e.g. `{dx: 'fbfJHSPpUQD;cYeuwXTCPkU',filters: ['pe:2014Q1;2014Q2','ou:O6uvpzGd5pu;lc3eMKXaEfw']}`. Run `discover` or visit {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#analytics DHIS2 API docs} to get the params available.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "`Optional` options for `getAnalytics` operation. Defaults to `{apiVersion: state.configuration.apiVersion, responseType: 'json'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Callback to handle response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getAnalytics({\n  dimensions: [\n   'dx:fbfJHSPpUQD;cYeuwXTCPkU',\n   'pe:2014',\n   'ou:O6uvpzGd5pu;lc3eMKXaEfw',\n  ],\n  measureCriteria: 'GE:6500;LT:33000',\n});",
            "caption": "Example getting only records where the data value is greater or equal to 6500 and less than 33000"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getResources",
      "params": [
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get DHIS2 api resources",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The `optional` query parameters for this endpoint. E.g `{filter: 'singular:like:attribute'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "The `optional` options, specifiying the filter expression. E.g. `singular:eq:attribute`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "filter",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "fields",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "The `optional callback function that will be called to handle data returned by this function.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getResources('dataElement', {\n     filter: 'singular:eq:attribute',\n     fields: '*',\n     responseType: 'xml',\n});",
            "caption": "Example getting a resource named `attribute`, in `xml` format, returning all the fields"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getSchema",
      "params": [
        "resourceType",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get schema of a given resource type, in any data format supported by DHIS2",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The type of resource to be updated(`singular` version of the `resource name`). E.g. `dataElement`, `organisationUnit`, etc. Run `getResources` to see available resources and their corresponding `singular` names.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "Optional `query parameters` for the `getSchema` operation. e.g. `{ fields: 'properties' ,skipPaging: true}`. Run`discover` or See {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#metadata-export-examples DHIS2 API Docs}",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional options for `getSchema` method. Defaults to `{apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "resourceType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional `callback` to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getSchema('dataElement', '{ fields: '*' }, { responseType: 'xml' });",
            "caption": "Example getting the `schema` for `dataElement` in XML"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getData",
      "params": [
        "resourceType",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get data. Generic helper method for getting data of any kind from DHIS2.\n- This can be used to get `DataValueSets`,`events`,`trackedEntityInstances`,`etc.`",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The type of resource to get(use its `plural` name). E.g. `dataElements`, `trackedEntityInstances`,`organisationUnits`, etc.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "Optional `query parameters` e.g. `{ou: 'DiszpKrYNg8'}`. Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html DHIS2 docs} for more details on which params to use for a given type of resource.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "`Optional` options for `getData` operation. Defaults to `{operationName: 'getData', apiVersion: state.configuration.apiVersion, responseType: 'json'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "operationName",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": "state",
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getData('trackedEntityInstances', {\n   fields: '*',\n   ou: 'DiszpKrYNg8',\n   entityType: 'nEenWmSyUEp',\n   trackedEntityInstance: 'dNpxRu1mWG5',\n});",
            "caption": "Example getting one `trackedEntityInstance` with `Id` 'dNpxRu1mWG5' for a given `orgUnit(DiszpKrYNg8)`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "getMetadata",
      "params": [
        "resources",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Get metadata. A generic helper function to get metadata records from a given DHIS2 instance",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Required. List of metadata resources to fetch. E.g. `['organisationUnits', 'attributes']` or like `'dataSets'` if you only want a single type of resource. See `getResources` to see the types of resources available.",
            "type": {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            },
            "name": "resources"
          },
          {
            "title": "param",
            "description": "Optional `query parameters` e.g. `{filters: ['name:like:ANC'],fields:'*'}`. See `discover` or visit {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#metadata-export DHIS2 API docs}",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `options` for `getMetadata` operation. Defaults to `{operationName: 'getMetadata', apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "operationName",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "resourceType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional `callback` to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "getMetadata(['dataElements', 'indicators'], {\n     filters: ['name:like:ANC'],\n});",
            "caption": "Example getting a list of `data elements` and `indicators` where `name` includes the word **ANC**"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "patch",
      "params": [
        "resourceType",
        "path",
        "data",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Patch a record. A generic helper function to send partial updates on one or more object properties.\n- You are not required to send the full body of object properties.\n- This is useful for cases where you don't want or need to update all properties on a object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}`",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Data to update. Include only the fields you want to update. E.g. `{name: \"New Name\"}`",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Optional `update` parameters e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters DHIS2 documentation}",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional options for update method. Defaults to `{operationName: 'patch', apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "operationName",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "patch('dataElements', 'FTRrcoaog83',\n{\n  name: 'New Name',\n});",
            "caption": "Example `patching` a `data element`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "del",
      "params": [
        "resourceType",
        "path",
        "data",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Delete a record. A generic helper function to delete an object",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The type of resource to be deleted. E.g. `trackedEntityInstances`, `organisationUnits`, etc.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "Can be an `id` of an `object` or `path` to the `nested object` to `delete`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\"identifiableObjects\": [{\"id\": \"IDA\"}, {\"id\": \"IDB\"}, {\"id\": \"IDC\"}]}`. See more {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects on DHIS2 API docs}",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Optional `update` parameters e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters DHIS2 documentation}",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "Optional `options` for `del` operation. Defaults to `{operationName: 'delete', apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "operationName",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "resourceType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "del('trackedEntityInstances', 'LcRd6Nyaq7T');",
            "caption": "Example`deleting` a `tracked entity instance`"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "upsert",
      "params": [
        "resourceType",
        "uniqueAttribute",
        "data",
        "params",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Upsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The type of a resource to `insert` or `update`. E.g. `trackedEntityInstances`",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "resourceType"
          },
          {
            "title": "param",
            "description": "An object containing a `attributeId` and `attributeValue` which will be used to uniquely identify the record",
            "type": {
              "type": "RecordType",
              "fields": [
                {
                  "type": "FieldType",
                  "key": "attributeId",
                  "value": {
                    "type": "NameExpression",
                    "name": "string"
                  }
                },
                {
                  "type": "FieldType",
                  "key": "attributeValue",
                  "value": {
                    "type": "NameExpression",
                    "name": "any"
                  }
                }
              ]
            },
            "name": "uniqueAttribute"
          },
          {
            "title": "param",
            "description": "The update data containing new values",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "data"
          },
          {
            "title": "param",
            "description": "Optional `import` parameters e.g. `{ou: 'lZGmxYbs97q', filters: ['w75KJ2mc4zz:EQ:Jane']}`",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "params"
          },
          {
            "title": "param",
            "description": "`Optional` options for `upsertTEI` operation. Defaults to `{replace: false, apiVersion: state.configuration.apiVersion,strict: true,responseType: 'json'}`.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "RecordType",
                "fields": [
                  {
                    "type": "FieldType",
                    "key": "replace",
                    "value": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "apiVersion",
                    "value": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "strict",
                    "value": {
                      "type": "NameExpression",
                      "name": "boolean"
                    }
                  },
                  {
                    "type": "FieldType",
                    "key": "responseType",
                    "value": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  }
                ]
              }
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Optional callback to handle the response",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            "name": "callback"
          },
          {
            "title": "throws",
            "description": "Throws range error",
            "type": {
              "type": "NameExpression",
              "name": "RangeError"
            }
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          },
          {
            "title": "example",
            "description": "upsert(\n   'trackedEntityInstances',\n   {\n      attributeId: 'lZGmxYbs97q',\n         attributeValue: state =>\n            state.data.attributes.find(obj => obj.attribute === 'lZGmxYbs97q')\n            .value,\n   },\n   state.data,\n   { ou: 'TSyzvBiovKh' }\n);",
            "caption": "- Example `expression.js` of upsert"
          },
          {
            "title": "todo",
            "description": "Tweak/refine to mimic implementation based on the following inspiration: {@link https://sqlite.org/lang_upsert.html sqlite upsert} and {@link https://wiki.postgresql.org/wiki/UPSERT postgresql upsert}"
          },
          {
            "title": "todo",
            "description": "Test implementation for upserting metadata"
          },
          {
            "title": "todo",
            "description": "Test implementation for upserting data values"
          },
          {
            "title": "todo",
            "description": "Implement the updateCondition"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "attrVal",
      "params": [
        "tei",
        "attributeName"
      ],
      "docs": {
        "description": "Gets an attribute value by its case-insensitive display name",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "valByName(tei.attributes, 'first name')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "A tracked entity instance (TEI) object",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "tei"
          },
          {
            "title": "param",
            "description": "The 'displayName' to search for in the TEI's attributes",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "attributeName"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    }
  ],
  "exports": [],
  "common": [
    {
      "name": "fn",
      "params": [
        "func"
      ],
      "docs": {
        "description": "Creates a custom step (or operation) for more flexible job writing.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "fn(state => {\n  // do some things to state\n  return state;\n});"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "is the function",
            "type": {
              "type": "NameExpression",
              "name": "Function"
            },
            "name": "func"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "sourceValue",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out a single value from source data.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "sourceValue('$.key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `state`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "dataPath",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Ensures a path points at the data.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "dataPath('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `data`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "dataValue",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out a single value from the source data object—usually `state.data`.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "dataValue('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `data`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "lastReferenceValue",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out the last reference value from source data.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "lastReferenceValue('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `references`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "each",
      "params": [
        "dataSource",
        "operation"
      ],
      "docs": {
        "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.\n\nIt also ensures the results of an operation make their way back into\nthe state's references.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "each(\"$.[*]\",\n  create(\"SObject\",\n    field(\"FirstName\", sourceValue(\"$.firstName\"))\n  )\n)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `state`.",
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            },
            "name": "dataSource"
          },
          {
            "title": "param",
            "description": "The operation needed to be repeated.",
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            },
            "name": "operation"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "field",
      "params": [
        "key",
        "value"
      ],
      "docs": {
        "description": "Returns a key, value pair in an array.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "field('destination_field_name__c', 'value')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Name of the field",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "key"
          },
          {
            "title": "param",
            "description": "The value itself or a sourceable operation.",
            "type": {
              "type": "NameExpression",
              "name": "Value"
            },
            "name": "value"
          }
        ]
      },
      "valid": true
    },
    {
      "name": "fields",
      "params": [
        "fields"
      ],
      "docs": {
        "description": "Zips key value pairs into an object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "fields(list_of_fields)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "a list of fields",
            "type": {
              "type": "NameExpression",
              "name": "Fields"
            },
            "name": "fields"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Object"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "merge",
      "params": [
        "dataSource",
        "fields"
      ],
      "docs": {
        "description": "Merges fields into each item in an array.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "merge(\n  \"$.books[*]\",\n  fields(\n    field( \"publisher\", sourceValue(\"$.publisher\") )\n  )\n)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            },
            "name": "dataSource"
          },
          {
            "title": "param",
            "description": "Group of fields to merge in.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "fields"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            }
          }
        ]
      },
      "valid": true
    }
  ]
}