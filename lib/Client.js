"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.req = req;
exports.get = get;
exports.post = post;
exports.put = put;
exports.patch = patch;
exports.del = del;
exports.head = head;
exports.options = options;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function req(_ref) {
  var url = _ref.url,
      transformRequest = _ref.transformRequest,
      transformResponse = _ref.transformResponse,
      headers = _ref.headers,
      params = _ref.params,
      paramsSerializer = _ref.paramsSerializer,
      timeout = _ref.timeout,
      withCredentials = _ref.withCredentials,
      adapter = _ref.adapter,
      auth = _ref.auth,
      responseType = _ref.responseType,
      responseEncoding = _ref.responseEncoding,
      xsrfCookieName = _ref.xsrfCookieName,
      xsrfHeaderName = _ref.xsrfHeaderName,
      onUploadProgress = _ref.onUploadProgress,
      onDownloadProgress = _ref.onDownloadProgress,
      maxContentLength = _ref.maxContentLength,
      maxBodyLength = _ref.maxBodyLength,
      validateStatus = _ref.validateStatus,
      maxRedirects = _ref.maxRedirects,
      socketPath = _ref.socketPath,
      httpAgent = _ref.httpAgent,
      httpsAgent = _ref.httpsAgent,
      proxy = _ref.proxy,
      cancelToken = _ref.cancelToken,
      decompress = _ref.decompress;
  return new Promise(function (resolve, reject) {
    _axios["default"].request({
      url: url,
      method: method,
      transformRequest: transformRequest,
      transformResponse: transformResponse,
      headers: headers,
      params: params,
      paramsSerializer: paramsSerializer,
      timeout: timeout,
      withCredentials: withCredentials,
      adapter: adapter,
      auth: auth,
      responseType: responseType,
      responseEncoding: responseEncoding,
      xsrfCookieName: xsrfCookieName,
      xsrfHeaderName: xsrfHeaderName,
      onUploadProgress: onUploadProgress,
      onDownloadProgress: onDownloadProgress,
      maxContentLength: maxContentLength,
      maxBodyLength: maxBodyLength,
      validateStatus: validateStatus,
      maxRedirects: maxRedirects,
      socketPath: socketPath,
      httpAgent: httpAgent,
      httpsAgent: httpsAgent,
      proxy: proxy,
      cancelToken: cancelToken,
      decompress: decompress
    }).then(function (result) {
      return resolve(result);
    })["catch"](function (error) {
      return reject(error);
    });
  });
}

function get(_ref2) {
  var url = _ref2.url,
      transformRequest = _ref2.transformRequest,
      transformResponse = _ref2.transformResponse,
      headers = _ref2.headers,
      params = _ref2.params,
      paramsSerializer = _ref2.paramsSerializer,
      timeout = _ref2.timeout,
      withCredentials = _ref2.withCredentials,
      adapter = _ref2.adapter,
      auth = _ref2.auth,
      responseType = _ref2.responseType,
      responseEncoding = _ref2.responseEncoding,
      xsrfCookieName = _ref2.xsrfCookieName,
      xsrfHeaderName = _ref2.xsrfHeaderName,
      onUploadProgress = _ref2.onUploadProgress,
      onDownloadProgress = _ref2.onDownloadProgress,
      maxContentLength = _ref2.maxContentLength,
      maxBodyLength = _ref2.maxBodyLength,
      validateStatus = _ref2.validateStatus,
      maxRedirects = _ref2.maxRedirects,
      socketPath = _ref2.socketPath,
      httpAgent = _ref2.httpAgent,
      httpsAgent = _ref2.httpsAgent,
      proxy = _ref2.proxy,
      cancelToken = _ref2.cancelToken,
      decompress = _ref2.decompress;
  return _axios["default"].request({
    url: url,
    method: 'GET',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  }).then(function (result) {
    return Promise.resolve(result);
  })["catch"](function (error) {
    return Promise.reject(error);
  });
}

function post(_ref3) {
  var url = _ref3.url,
      transformRequest = _ref3.transformRequest,
      transformResponse = _ref3.transformResponse,
      headers = _ref3.headers,
      params = _ref3.params,
      paramsSerializer = _ref3.paramsSerializer,
      timeout = _ref3.timeout,
      withCredentials = _ref3.withCredentials,
      adapter = _ref3.adapter,
      auth = _ref3.auth,
      responseType = _ref3.responseType,
      responseEncoding = _ref3.responseEncoding,
      xsrfCookieName = _ref3.xsrfCookieName,
      xsrfHeaderName = _ref3.xsrfHeaderName,
      onUploadProgress = _ref3.onUploadProgress,
      onDownloadProgress = _ref3.onDownloadProgress,
      maxContentLength = _ref3.maxContentLength,
      maxBodyLength = _ref3.maxBodyLength,
      validateStatus = _ref3.validateStatus,
      maxRedirects = _ref3.maxRedirects,
      socketPath = _ref3.socketPath,
      httpAgent = _ref3.httpAgent,
      httpsAgent = _ref3.httpsAgent,
      proxy = _ref3.proxy,
      cancelToken = _ref3.cancelToken,
      decompress = _ref3.decompress;
  return _axios["default"].request({
    url: url,
    method: 'POST',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  });
}

function put(_ref4) {
  var url = _ref4.url,
      transformRequest = _ref4.transformRequest,
      transformResponse = _ref4.transformResponse,
      headers = _ref4.headers,
      params = _ref4.params,
      paramsSerializer = _ref4.paramsSerializer,
      timeout = _ref4.timeout,
      withCredentials = _ref4.withCredentials,
      adapter = _ref4.adapter,
      auth = _ref4.auth,
      responseType = _ref4.responseType,
      responseEncoding = _ref4.responseEncoding,
      xsrfCookieName = _ref4.xsrfCookieName,
      xsrfHeaderName = _ref4.xsrfHeaderName,
      onUploadProgress = _ref4.onUploadProgress,
      onDownloadProgress = _ref4.onDownloadProgress,
      maxContentLength = _ref4.maxContentLength,
      maxBodyLength = _ref4.maxBodyLength,
      validateStatus = _ref4.validateStatus,
      maxRedirects = _ref4.maxRedirects,
      socketPath = _ref4.socketPath,
      httpAgent = _ref4.httpAgent,
      httpsAgent = _ref4.httpsAgent,
      proxy = _ref4.proxy,
      cancelToken = _ref4.cancelToken,
      decompress = _ref4.decompress;
  return _axios["default"].request({
    url: url,
    method: 'PUT',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  });
}

function patch(_ref5) {
  var url = _ref5.url,
      transformRequest = _ref5.transformRequest,
      transformResponse = _ref5.transformResponse,
      headers = _ref5.headers,
      params = _ref5.params,
      paramsSerializer = _ref5.paramsSerializer,
      timeout = _ref5.timeout,
      withCredentials = _ref5.withCredentials,
      adapter = _ref5.adapter,
      auth = _ref5.auth,
      responseType = _ref5.responseType,
      responseEncoding = _ref5.responseEncoding,
      xsrfCookieName = _ref5.xsrfCookieName,
      xsrfHeaderName = _ref5.xsrfHeaderName,
      onUploadProgress = _ref5.onUploadProgress,
      onDownloadProgress = _ref5.onDownloadProgress,
      maxContentLength = _ref5.maxContentLength,
      maxBodyLength = _ref5.maxBodyLength,
      validateStatus = _ref5.validateStatus,
      maxRedirects = _ref5.maxRedirects,
      socketPath = _ref5.socketPath,
      httpAgent = _ref5.httpAgent,
      httpsAgent = _ref5.httpsAgent,
      proxy = _ref5.proxy,
      cancelToken = _ref5.cancelToken,
      decompress = _ref5.decompress;
  return _axios["default"].request({
    url: url,
    method: 'PATCH',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  });
}

function del(_ref6) {
  var url = _ref6.url,
      transformRequest = _ref6.transformRequest,
      transformResponse = _ref6.transformResponse,
      headers = _ref6.headers,
      params = _ref6.params,
      paramsSerializer = _ref6.paramsSerializer,
      timeout = _ref6.timeout,
      withCredentials = _ref6.withCredentials,
      adapter = _ref6.adapter,
      auth = _ref6.auth,
      responseType = _ref6.responseType,
      responseEncoding = _ref6.responseEncoding,
      xsrfCookieName = _ref6.xsrfCookieName,
      xsrfHeaderName = _ref6.xsrfHeaderName,
      onUploadProgress = _ref6.onUploadProgress,
      onDownloadProgress = _ref6.onDownloadProgress,
      maxContentLength = _ref6.maxContentLength,
      maxBodyLength = _ref6.maxBodyLength,
      validateStatus = _ref6.validateStatus,
      maxRedirects = _ref6.maxRedirects,
      socketPath = _ref6.socketPath,
      httpAgent = _ref6.httpAgent,
      httpsAgent = _ref6.httpsAgent,
      proxy = _ref6.proxy,
      cancelToken = _ref6.cancelToken,
      decompress = _ref6.decompress;
  return _axios["default"].request({
    url: url,
    method: 'DELETE',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  });
}

function head(_ref7) {
  var url = _ref7.url,
      transformRequest = _ref7.transformRequest,
      transformResponse = _ref7.transformResponse,
      headers = _ref7.headers,
      params = _ref7.params,
      paramsSerializer = _ref7.paramsSerializer,
      timeout = _ref7.timeout,
      withCredentials = _ref7.withCredentials,
      adapter = _ref7.adapter,
      auth = _ref7.auth,
      responseType = _ref7.responseType,
      responseEncoding = _ref7.responseEncoding,
      xsrfCookieName = _ref7.xsrfCookieName,
      xsrfHeaderName = _ref7.xsrfHeaderName,
      onUploadProgress = _ref7.onUploadProgress,
      onDownloadProgress = _ref7.onDownloadProgress,
      maxContentLength = _ref7.maxContentLength,
      maxBodyLength = _ref7.maxBodyLength,
      validateStatus = _ref7.validateStatus,
      maxRedirects = _ref7.maxRedirects,
      socketPath = _ref7.socketPath,
      httpAgent = _ref7.httpAgent,
      httpsAgent = _ref7.httpsAgent,
      proxy = _ref7.proxy,
      cancelToken = _ref7.cancelToken,
      decompress = _ref7.decompress;
  return _axios["default"].request({
    url: url,
    method: 'HEAD',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  });
}

function options(_ref8) {
  var url = _ref8.url,
      transformRequest = _ref8.transformRequest,
      transformResponse = _ref8.transformResponse,
      headers = _ref8.headers,
      params = _ref8.params,
      paramsSerializer = _ref8.paramsSerializer,
      timeout = _ref8.timeout,
      withCredentials = _ref8.withCredentials,
      adapter = _ref8.adapter,
      auth = _ref8.auth,
      responseType = _ref8.responseType,
      responseEncoding = _ref8.responseEncoding,
      xsrfCookieName = _ref8.xsrfCookieName,
      xsrfHeaderName = _ref8.xsrfHeaderName,
      onUploadProgress = _ref8.onUploadProgress,
      onDownloadProgress = _ref8.onDownloadProgress,
      maxContentLength = _ref8.maxContentLength,
      maxBodyLength = _ref8.maxBodyLength,
      validateStatus = _ref8.validateStatus,
      maxRedirects = _ref8.maxRedirects,
      socketPath = _ref8.socketPath,
      httpAgent = _ref8.httpAgent,
      httpsAgent = _ref8.httpsAgent,
      proxy = _ref8.proxy,
      cancelToken = _ref8.cancelToken,
      decompress = _ref8.decompress;
  return _axios["default"].request({
    url: url,
    method: 'OPTIONS',
    transformRequest: transformRequest,
    transformResponse: transformResponse,
    headers: headers,
    params: params,
    paramsSerializer: paramsSerializer,
    timeout: timeout,
    withCredentials: withCredentials,
    adapter: adapter,
    auth: auth,
    responseType: responseType,
    responseEncoding: responseEncoding,
    xsrfCookieName: xsrfCookieName,
    xsrfHeaderName: xsrfHeaderName,
    onUploadProgress: onUploadProgress,
    onDownloadProgress: onDownloadProgress,
    maxContentLength: maxContentLength,
    maxBodyLength: maxBodyLength,
    validateStatus: validateStatus,
    maxRedirects: maxRedirects,
    socketPath: socketPath,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    cancelToken: cancelToken,
    decompress: decompress
  });
} // Interceptors
// axios.interceptors.response.use(
//   function (response) {
//     // TODO Cleanup sensitive info
//     return response;
//   },
//   function (error) {
//     // TODO Cleanup sensitive info
//     // Log.error(`${error?.message}`);
//     // {
//     //   status: error?.response?.status,
//     //   message: error?.message,
//     //   url: error?.response?.config?.url,
//     //   responseData: error?.response?.data,
//     //   isAxiosError: error?.isAxiosError,
//     // }
//     return Promise.reject(error);
//   }
// );
