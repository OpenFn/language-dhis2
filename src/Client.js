import axios from 'axios';

export function req({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return new Promise((resolve, reject) => {
    axios
      .request({
        url,
        method,
        transformRequest,
        transformResponse,
        headers,
        params,
        paramsSerializer,
        timeout,
        withCredentials,
        adapter,
        auth,
        responseType,
        responseEncoding,
        xsrfCookieName,
        xsrfHeaderName,
        onUploadProgress,
        onDownloadProgress,
        maxContentLength,
        maxBodyLength,
        validateStatus,
        maxRedirects,
        socketPath,
        httpAgent,
        httpsAgent,
        proxy,
        cancelToken,
        decompress,
      })
      .then(result => resolve(result))
      .catch(error => reject(error));
  });
}

export function get({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios
    .request({
      url,
      method: 'GET',
      transformRequest,
      transformResponse,
      headers,
      params,
      paramsSerializer,
      timeout,
      withCredentials,
      adapter,
      auth,
      responseType,
      responseEncoding,
      xsrfCookieName,
      xsrfHeaderName,
      onUploadProgress,
      onDownloadProgress,
      maxContentLength,
      maxBodyLength,
      validateStatus,
      maxRedirects,
      socketPath,
      httpAgent,
      httpsAgent,
      proxy,
      cancelToken,
      decompress,
    })
    .then(result => Promise.resolve(result))
    .catch(error => Promise.reject(error));
}

export function post({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios.request({
    url,
    method: 'POST',
    transformRequest,
    transformResponse,
    headers,
    params,
    paramsSerializer,
    timeout,
    withCredentials,
    adapter,
    auth,
    responseType,
    responseEncoding,
    xsrfCookieName,
    xsrfHeaderName,
    onUploadProgress,
    onDownloadProgress,
    maxContentLength,
    maxBodyLength,
    validateStatus,
    maxRedirects,
    socketPath,
    httpAgent,
    httpsAgent,
    proxy,
    cancelToken,
    decompress,
  });
}

export function put({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios.request({
    url,
    method: 'PUT',
    transformRequest,
    transformResponse,
    headers,
    params,
    paramsSerializer,
    timeout,
    withCredentials,
    adapter,
    auth,
    responseType,
    responseEncoding,
    xsrfCookieName,
    xsrfHeaderName,
    onUploadProgress,
    onDownloadProgress,
    maxContentLength,
    maxBodyLength,
    validateStatus,
    maxRedirects,
    socketPath,
    httpAgent,
    httpsAgent,
    proxy,
    cancelToken,
    decompress,
  });
}

export function patch({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios.request({
    url,
    method: 'PATCH',
    transformRequest,
    transformResponse,
    headers,
    params,
    paramsSerializer,
    timeout,
    withCredentials,
    adapter,
    auth,
    responseType,
    responseEncoding,
    xsrfCookieName,
    xsrfHeaderName,
    onUploadProgress,
    onDownloadProgress,
    maxContentLength,
    maxBodyLength,
    validateStatus,
    maxRedirects,
    socketPath,
    httpAgent,
    httpsAgent,
    proxy,
    cancelToken,
    decompress,
  });
}

export function del({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios.request({
    url,
    method: 'DELETE',
    transformRequest,
    transformResponse,
    headers,
    params,
    paramsSerializer,
    timeout,
    withCredentials,
    adapter,
    auth,
    responseType,
    responseEncoding,
    xsrfCookieName,
    xsrfHeaderName,
    onUploadProgress,
    onDownloadProgress,
    maxContentLength,
    maxBodyLength,
    validateStatus,
    maxRedirects,
    socketPath,
    httpAgent,
    httpsAgent,
    proxy,
    cancelToken,
    decompress,
  });
}

export function head({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios.request({
    url,
    method: 'HEAD',
    transformRequest,
    transformResponse,
    headers,
    params,
    paramsSerializer,
    timeout,
    withCredentials,
    adapter,
    auth,
    responseType,
    responseEncoding,
    xsrfCookieName,
    xsrfHeaderName,
    onUploadProgress,
    onDownloadProgress,
    maxContentLength,
    maxBodyLength,
    validateStatus,
    maxRedirects,
    socketPath,
    httpAgent,
    httpsAgent,
    proxy,
    cancelToken,
    decompress,
  });
}

export function options({
  url,
  transformRequest,
  transformResponse,
  headers,
  params,
  paramsSerializer,
  timeout,
  withCredentials,
  adapter,
  auth,
  responseType,
  responseEncoding,
  xsrfCookieName,
  xsrfHeaderName,
  onUploadProgress,
  onDownloadProgress,
  maxContentLength,
  maxBodyLength,
  validateStatus,
  maxRedirects,
  socketPath,
  httpAgent,
  httpsAgent,
  proxy,
  cancelToken,
  decompress,
}) {
  return axios.request({
    url,
    method: 'OPTIONS',
    transformRequest,
    transformResponse,
    headers,
    params,
    paramsSerializer,
    timeout,
    withCredentials,
    adapter,
    auth,
    responseType,
    responseEncoding,
    xsrfCookieName,
    xsrfHeaderName,
    onUploadProgress,
    onDownloadProgress,
    maxContentLength,
    maxBodyLength,
    validateStatus,
    maxRedirects,
    socketPath,
    httpAgent,
    httpsAgent,
    proxy,
    cancelToken,
    decompress,
  });
}

// Interceptors
// axios.interceptors.response.use(
//   function (response) {
//     // TODO Cleanup sensitive info
//     return response;
//   },
//   function (error) {
//     // TODO Cleanup sensitive info
//     // Log.error(`${error?.message}`);
//     // {
//     //   status: error?.response?.status,
//     //   message: error?.message,
//     //   url: error?.response?.config?.url,
//     //   responseData: error?.response?.data,
//     //   isAxiosError: error?.isAxiosError,
//     // }
//     return Promise.reject(error);
//   }
// );
